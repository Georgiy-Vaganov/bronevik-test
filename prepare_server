#!/bin/bash
#
#

# user which we need to create
USER="user1"


RED='\033[0;31m'
NC='\033[0m'

if [ -f /etc/SRV_SUCCESS_DONE ]; then
    echo "Server already installed"
    exit 0;
fi


echo -n "Checking architecture: "
MY_ARCH=$(dpkg --print-architecture)
if [[ $MY_ARCH != "amd64" ]]; then
  echo "Unsupported - $MY_ARCH"
  echo -e "${RED}Fatal ERROR: The only supported architecture is 'amd64'${NC}"
  exit 1
else
  echo "OK"
fi

if [ -f /tmp/COOKING_SERVER_ACION ]; then
    echo "Server already in cook progress"
    exit 1
fi
touch /tmp/COOKING_SERVER_ACION

DITRIBUTIVE=`cat /etc/issue | head -1 | awk '{print $1}'`

# Creating new user for login to this server and running docker
addgroup $USER  > /dev/null 2>&1
useradd -m -d /home/$USER -s /bin/bash -g $USER -G sudo $USER > /dev/null 2>&1

# Create .ssh folder fot user and copy public key
if [ ! -d /home/${USER}/.ssh ]; then
    mkdir /home/${USER}/.ssh
fi
mv /tmp/id_rsa.pub /home/${USER}/.ssh/authorized_keys
chown ${USER}:${USER} -R /home/${USER}
chmod 700 /home/${USER}/.ssh
chmod 600 /home/${USER}/.ssh/authorized_keys

# Create htdocs directory
if [ ! -d /var/www ]; then
    mkdir /var/www/
fi

# Copy hostname to www directory
cp -f /etc/hostname /var/www/.

# Upgrade current packedges
set DEBIAN_FRONTEND=noninteractive
apt-get update > /dev/null 2>&1
apt-get -y upgrade > /dev/null 2>&1

# Install necessary software and adding Docker stable repository
set DEBIAN_FRONTEND noninteractive
apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y > /dev/null 2>&1
curl -fsSL https://download.docker.com/linux/debian/gpg > /tmp/docker.gpg && apt-key add /tmp/docker.gpg  > /dev/null 2>&1
add-apt-repository  "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable" > /dev/null 2>&1

# Doing update and install Docker software
set DEBIAN_FRONTEND noninteractive
apt-get update  > /dev/null 2>&1
apt-get install docker-ce docker-ce-cli containerd.io -y > /dev/null 2>&1

# Adding user to docker group
usermod -aG docker $USER > /dev/null 2>&1

# Run nginx container from our non privileged user
su - $USER -c "docker run --restart unless-stopped -p 80:80 -p 443:443 --name our-nginx -v /var/log/nginx:/var/log/nginx:rw \
                                                                                                                -v /var/www:/usr/share/nginx/html:ro \
                                                                                                                -d nginx > /dev/null 2>&1"
# Turn on Server Side includes and reload nginx
# Testing if option already exsist
su - ${USER} -c "docker exec our-nginx sh -c \"cat /etc/nginx/conf.d/default.conf | grep ssi\"" 2>&1 > /dev/null
if [ "$?" -eq 1 ]; then
    su - ${USER} -c "docker exec our-nginx sh -c \"cat /etc/nginx/conf.d/default.conf | sed '/index.htm;/a \        ssi    on;' > /tmp/vhost.conf.tmp\""
    su - ${USER} -c "docker exec our-nginx sh -c \"cat /tmp/vhost.conf.tmp > /etc/nginx/conf.d/default.conf\""
    su - ${USER} -c "docker exec our-nginx sh -c \"/usr/sbin/nginx -s reload\""
fi

# Get MY ip
EXT_IFACE=`ip r | grep default | awk '{print $5}'`
EXT_IP=`ip a show $EXT_IFACE | grep inet | grep -v ':' | awk '{print $2}' | awk -F '/' '{print $1}'`

# Make index page
echo '<center><h2>Hello world!</h2></center><br>' >/var/www/index.html
echo 'Container IP: <b><!--#echo var="SERVER_ADDR"--></b><br>' >> /var/www/index.html
echo 'External IP:&nbsp;&nbsp; <b><!--#echo var="HTTP_HOST"--></b><br>' >> /var/www/index.html
echo 'Client IP:&nbsp;&nbsp;&nbsp; <b><!--#echo var="REMOTE_ADDR"--></b><br>' >> /var/www/index.html
echo 'Server name: <b><!--#include file="/hostname"--></b>' >> /var/www/index.html

# Configuring ssh server to log in only by key
cat /etc/ssh/sshd_config | grep -Ev 'PermitRootLogin|PasswordAuthentication' > /tmp/sshd_config.tmp
mv /tmp/sshd_config.tmp /etc/ssh/sshd_config
echo "" >> /etc/sshd_config
echo "PermitRootLogin no" >> /etc/ssh/sshd_config
echo "PasswordAuthentication no" >> /etc/ssh/sshd_config

systemctl reload sshd

# Configuring firewall

cat <<EOF > /etc/network/if-up.d/firewall
#!/bin/sh
#
EXT_IFACE=\`ip r | grep default | awk '{print \$5}'\`
GW_FIRST_OCTET=\`ip r | grep default | awk '{print \$3}' | awk -F '.' '{print \$1}'\`
EXT_IP=\`ip a show \$EXT_IFACE | grep inet | grep -v ':' | awk '{print \$2}' | awk -F '/' '{print \$1}' | grep \${GW_FIRST_OCTET}\`

# Default policy
/sbin/iptables -P INPUT DROP

# Allow only ICMP echo requests (ping).
/sbin/iptables -D INPUT -p icmp -i \$EXT_IFACE -d \$EXT_IP --icmp-type echo-request   -j ACCEPT > /dev/null 2>&1
/sbin/iptables -A INPUT -p icmp -i \$EXT_IFACE -d \$EXT_IP --icmp-type echo-request   -j ACCEPT

# Allow SSH connections
/sbin/iptables -D INPUT  -m state --state NEW,ESTABLISHED -p tcp -i \$EXT_IFACE -d \$EXT_IP --dport 22 -j ACCEPT > /dev/null 2>&1
/sbin/iptables -A INPUT  -m state --state NEW,ESTABLISHED -p tcp -i \$EXT_IFACE -d \$EXT_IP --dport 22 -j ACCEPT

EOF

chmod +x /etc/network/if-up.d/firewall
/bin/sh /etc/network/if-up.d/firewall

rm /tmp/COOKING_SERVER_ACION

if [ "$?" -eq 0 ]; then
    echo "Successfully cooked!" > /etc/SRV_SUCCESS_DONE
fi

echo "All done. "